{"version":3,"file":"semantic-api.min.js","sources":["../src/semantic-api.ts"],"sourcesContent":["interface customFunc {\r\n    (method: string, data: string, args: any[], url: string): void\r\n}\r\n\r\ninterface customMethods {\r\n    [propName:string]: customFunc\r\n}\r\n\r\nclass SemanticApi {\r\n    public calls: string[]\r\n    private _proxy: any\r\n    private bondingStr: string\r\n    private waitForBonding: boolean\r\n    protected baseUrl: string\r\n    protected delimiter: string\r\n    protected methods: customMethods\r\n\r\n    /**\r\n     * @param {string} baseUrl the baseUrl that will be added at the start of url\r\n     * @param {object} customMethods key-value custom method function\r\n     */\r\n    constructor (baseUrl = '', customMethods = {}) {\r\n        this.calls = []\r\n        this.delimiter = '/'\r\n        this.baseUrl = baseUrl\r\n\r\n        this.methods = {\r\n            dot: function (method: string, data: any, args: any[], url: string) {\r\n                data === undefined ? this.bonding('.') : this.push(method, data, ...args)\r\n            },\r\n            slash: function (method: string, data: any, args: any[], url: string) {\r\n                data === undefined ? this.bonding('/') : this.push(method, data, ...args)\r\n            },\r\n            http: function (method: string, data: any, args: any[], url: string) {\r\n                data === undefined ? this.bonding('http://') : this.push(method, data, ...args)\r\n            },\r\n            https: function (method: string, data: any, args: any[], url: string) {\r\n                data === undefined ? this.bonding('https://') : this.push(method, data, ...args)\r\n            },\r\n            query: function (method: string, data: any, args: any[], url: string) {\r\n                if (data === undefined) {\r\n                    this.push(method, data, ...args)\r\n                } else {\r\n                    const prev = this.pop()\r\n                    const queryStringify = (opts: {[prop: string]: string|number} = {}) => Object.keys(opts).map(name => `${name}=${opts[name]}`).join('&')\r\n                    this.push(`${prev}?${queryStringify(data)}`)\r\n                }\r\n            }\r\n        }\r\n\r\n        this.methods = { ...this.methods, ...customMethods }\r\n        this._proxy = this._buildProxy()\r\n        return this._proxy\r\n    }\r\n\r\n    /**\r\n     * return is ES6-Proxy supported\r\n     */\r\n    _isSupportProxy () {\r\n        return typeof Proxy === 'function'\r\n    }\r\n\r\n    /**\r\n     * check is method exist and is it a function\r\n     * @param {string} methodName\r\n     */\r\n    _isMethod (methodName: string) {\r\n        return this.methods.hasOwnProperty(methodName) && typeof this.methods[methodName] === 'function'\r\n    }\r\n\r\n    /**\r\n     * build and return the new proxy instance\r\n     */\r\n    _buildProxy () {\r\n        // GoogleChrome/proxy-polyfill needs to ensure the property at creation time.\r\n        // Which is useless for our use case. And there is no other useable alternative choice.\r\n        if (!this._isSupportProxy()) {\r\n            throw new Error('Proxy is not supported in current environment.')\r\n        }\r\n\r\n        // Non-extensible object\r\n        const noop = Object.seal(() => {})\r\n        const handler = {\r\n            get: (target: any, property: string, receiver: any) => {\r\n                const reflectors = [\r\n                    'toString', 'valueOf', 'inspect', 'constructor',\r\n                    Symbol.toPrimitive,\r\n                    Symbol.for('util.inspect.custom'),\r\n                    // https://github.com/targos/node/commit/cc9898bd7747d2884afe9da8fff7e954225ba347\r\n                    Symbol.for('nodejs.util.inspect.custom')\r\n                ]\r\n                if (reflectors.includes(property)) return () => this.toString()\r\n\r\n                this.onGetProperty(property)\r\n                return this._proxy\r\n            },\r\n\r\n            apply: (target: any, receiver: any, args: any[]) => {\r\n                const methodName = this.pop()\r\n\r\n                if (this._isMethod(methodName)) {\r\n                    const value = args.shift()\r\n                    this.methods[methodName].call(this, methodName, value, args, this.toString())\r\n                } else {\r\n                    this.push(methodName, ...args)\r\n                }\r\n\r\n                return this._proxy\r\n            }\r\n        }\r\n\r\n        return new Proxy(noop, handler)\r\n    }\r\n\r\n    /**\r\n     * handler when proxy trap \"get\" triggered\r\n     * @param {string} property the property name being accessed\r\n     */\r\n    onGetProperty (property: string) {\r\n        if (this.waitForBonding) {\r\n            this.handleBonding(property)\r\n        } else {\r\n            this.push(property)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * push item to call list\r\n     * @param {string|number} item\r\n     * @param args\r\n     */\r\n    push (item: string|number, ...args: any[]) {\r\n        args = args.map(item => item && item.toString())\r\n        this.calls.push(item.toString(), ...args)\r\n    }\r\n\r\n    /**\r\n     * pop item from call list\r\n     */\r\n    pop (): string {\r\n        return this.calls.pop()\r\n    }\r\n\r\n    /**\r\n     * bonding previous and next property with bonding string\r\n     * @param {string} bondingStr the bonding string\r\n     */\r\n    bonding (bondingStr: string) {\r\n        this.bondingStr = bondingStr\r\n        this.waitForBonding = true\r\n    }\r\n\r\n    handleBonding (curr: string) {\r\n        const prev = this.pop() || ''\r\n        this.push(prev + this.bondingStr + curr)\r\n\r\n        this.waitForBonding = false\r\n    }\r\n\r\n    toString () {\r\n        return this.baseUrl + this.calls.join(this.delimiter) + (this.waitForBonding ? this.bondingStr : '')\r\n    }\r\n}\r\n\r\nmodule.exports = SemanticApi\r\n"],"names":["module","exports","constructor","baseUrl","customMethods","calls","delimiter","methods","dot","method","data","args","url","undefined","this","bonding","push","slash","http","https","query","prev","pop","queryStringify","opts","Object","keys","map","name","join","_proxy","_buildProxy","_isSupportProxy","Proxy","_isMethod","methodName","hasOwnProperty","Error","noop","seal","get","target","property","receiver","Symbol","toPrimitive","for","includes","toString","onGetProperty","apply","value","shift","call","waitForBonding","handleBonding","item","bondingStr","curr"],"mappings":"kNAoKAA,OAAOC,QA5JP,MAaIC,kBAAaC,yDAAU,GAAIC,yDAAgB,uMAClCC,MAAQ,QACRC,UAAY,SACZH,QAAUA,OAEVI,QAAU,CACXC,IAAK,SAAUC,EAAgBC,EAAWC,EAAaC,QAC1CC,IAATH,EAAqBI,KAAKC,QAAQ,KAAOD,KAAKE,KAAKP,EAAQC,KAASC,IAExEM,MAAO,SAAUR,EAAgBC,EAAWC,EAAaC,QAC5CC,IAATH,EAAqBI,KAAKC,QAAQ,KAAOD,KAAKE,KAAKP,EAAQC,KAASC,IAExEO,KAAM,SAAUT,EAAgBC,EAAWC,EAAaC,QAC3CC,IAATH,EAAqBI,KAAKC,QAAQ,WAAaD,KAAKE,KAAKP,EAAQC,KAASC,IAE9EQ,MAAO,SAAUV,EAAgBC,EAAWC,EAAaC,QAC5CC,IAATH,EAAqBI,KAAKC,QAAQ,YAAcD,KAAKE,KAAKP,EAAQC,KAASC,IAE/ES,MAAO,SAAUX,EAAgBC,EAAWC,EAAaC,WACxCC,IAATH,OACKM,KAAKP,EAAQC,KAASC,OACxB,OACGU,EAAOP,KAAKQ,MACZC,EAAiB,eAACC,yDAAwC,UAAOC,OAAOC,KAAKF,GAAMG,IAAIC,aAAWA,cAAQJ,EAAKI,KAASC,KAAK,WAC9Hb,eAAQK,cAAQE,EAAeb,aAK3CH,8UAAeO,KAAKP,QAAYH,QAChC0B,OAAShB,KAAKiB,cACZjB,KAAKgB,OAMhBE,wBAC4B,mBAAVC,MAOlBC,UAAWC,UACArB,KAAKP,QAAQ6B,eAAeD,IAAmD,mBAA7BrB,KAAKP,QAAQ4B,GAM1EJ,kBAGSjB,KAAKkB,wBACA,IAAIK,MAAM,wDAIdC,EAAOb,OAAOc,KAAK,eA8BlB,IAAIN,MAAMK,EA7BD,CACZE,IAAK,CAACC,EAAaC,EAAkBC,IACd,CACf,WAAY,UAAW,UAAW,cAClCC,OAAOC,YACPD,OAAOE,IAAI,uBAEXF,OAAOE,IAAI,+BAEAC,SAASL,GAAkB,IAAM5B,KAAKkC,iBAEhDC,cAAcP,GACZ5B,KAAKgB,QAGhBoB,MAAO,CAACT,EAAaE,EAAehC,WAC1BwB,EAAarB,KAAKQ,SAEpBR,KAAKoB,UAAUC,GAAa,OACtBgB,EAAQxC,EAAKyC,aACd7C,QAAQ4B,GAAYkB,KAAKvC,KAAMqB,EAAYgB,EAAOxC,EAAMG,KAAKkC,sBAE7DhC,KAAKmB,KAAexB,UAGtBG,KAAKgB,UAWxBmB,cAAeP,GACP5B,KAAKwC,oBACAC,cAAcb,QAEd1B,KAAK0B,GASlB1B,KAAMwC,8BAAwB7C,mCAAAA,oBAC1BA,EAAOA,EAAKgB,IAAI6B,GAAQA,GAAQA,EAAKR,iBAChC3C,MAAMW,KAAKwC,EAAKR,cAAerC,GAMxCW,aACWR,KAAKT,MAAMiB,MAOtBP,QAAS0C,QACAA,WAAaA,OACbH,gBAAiB,EAG1BC,cAAeG,SACLrC,EAAOP,KAAKQ,OAAS,QACtBN,KAAKK,EAAOP,KAAK2C,WAAaC,QAE9BJ,gBAAiB,EAG1BN,kBACWlC,KAAKX,QAAUW,KAAKT,MAAMwB,KAAKf,KAAKR,YAAcQ,KAAKwC,eAAiBxC,KAAK2C,WAAa"}